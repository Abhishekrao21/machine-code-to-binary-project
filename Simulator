memory = {
    '0x00010000': '0000000000000000000000000000000', '0x00010004': '0000000000000000000000000000000',
    '0x00010008': '0000000000000000000000000000000', '0x0001000c': '0000000000000000000000000000000', 
    '0x00010010': '0000000000000000000000000000000', '0x00010014': '0000000000000000000000000000000',
    '0x00010018': '0000000000000000000000000000000', '0x0001001c': '0000000000000000000000000000000',
    '0x00010020': '0000000000000000000000000000000', '0x00010024': '0000000000000000000000000000000',
    '0x00010028': '0000000000000000000000000000000', '0x0001002c': '0000000000000000000000000000000',
    '0x00010030': '0000000000000000000000000000000', '0x00010034': '0000000000000000000000000000000',
    '0x00010038': '0000000000000000000000000000000', '0x0001003c': '0000000000000000000000000000000',
    '0x00010040': '0000000000000000000000000000000', '0x00010044': '0000000000000000000000000000000',
    '0x00010048': '0000000000000000000000000000000', '0x0001004c': '0000000000000000000000000000000',
    '0x00010050': '0000000000000000000000000000000', '0x00010054': '0000000000000000000000000000000',
    '0x00010058': '0000000000000000000000000000000', '0x0001005c': '0000000000000000000000000000000',
    '0x00010060': '0000000000000000000000000000000', '0x00010064': '0000000000000000000000000000000',
    '0x00010068': '0000000000000000000000000000000', '0x0001006c': '0000000000000000000000000000000',
    '0x00010070': '0000000000000000000000000000000', '0x00010074': '0000000000000000000000000000000',
    '0x00010078': '0000000000000000000000000000000', '0x0001007c': '0000000000000000000000000000000'
}

dict_registers = {
    '00000': '00000000000000000000000000000000',
    '00001': '00000000000000000000000000000000',
    '00010': '00000000000000000000000100000000',
    '00011': '00000000000000000000000000000000',
    '00100': '00000000000000000000000000000000',
    '00101': '00000000000000000000000000000000',
    '00110': '00000000000000000000000000000000',
    '00111': '00000000000000000000000000000000',
    '01000': '00000000000000000000000000000000',
    '01001': '00000000000000000000000000000000',
    '01010': '00000000000000000000000000000000',
    '01011': '00000000000000000000000000000000',
    '01100': '00000000000000000000000000000000',
    '01101': '00000000000000000000000000000000',
    '01110': '00000000000000000000000000000000',
    '01111': '00000000000000000000000000000000',
    '10000': '00000000000000000000000000000000',
    '10001': '00000000000000000000000000000000',
    '10010': '00000000000000000000000000000000',
    '10011': '00000000000000000000000000000000',
    '10100': '00000000000000000000000000000000',
    '10101': '00000000000000000000000000000000',
    '10110': '00000000000000000000000000000000',
    '10111': '00000000000000000000000000000000',
    '11000': '00000000000000000000000000000000',
    '11001': '00000000000000000000000000000000',
    '11010': '00000000000000000000000000000000',
    '11011': '00000000000000000000000000000000',
    '11100': '00000000000000000000000000000000',
    '11101': '00000000000000000000000000000000',
    '11110': '00000000000000000000000000000000',
    '11111': '00000000000000000000000000000000'
}

abi_mapping = {
    'zero': '00000','ra': '00001','sp': '00010','gp': '00011','tp': '00100','t0':'00101',
    't1': '00110','t2': '00111','s0':'01000','fp':'01000','s1': '01001',
    'a0': '01010','a1': '01011','a2': '01100','a3': '01101',
    'a4': '01110','a5': '01111','a6': '10000','a7': '10001','s2': '10010',
    's3': '10011','s4': '10100','s5': '10101','s6': '10110','s7': '10111',
    's8': '11000','s9': '11001','s10': '11010','s11': '11011','t3': '11100',
    't4': '11101','t5': '11110','t6': '11111',
    }
def Convert_2scomplement(num_str, num_bits=32):
    num = int(num_str)
    if num < 0:
        num = (1 << num_bits) + num
    return num

def extend_signed_to_32_bits(binary_str):
  # Check if the number is negative
  is_negative = binary_str[0] == '1'

  # Calculate the number of bits to extend
  zeros_to_prepend = 32 - len(binary_str)

  # If the number is negative, extend with 1s (to preserve the sign)
  if is_negative:
      extended_binary_str = '1' * zeros_to_prepend + binary_str[1:]
  else:
      extended_binary_str = '0' * zeros_to_prepend + binary_str[1:]

  return extended_binary_str

def binary_to_integer(binary_str):
  # Convert binary string to integer
  decimal_value = int(binary_str, 2)
  return decimal_value

def decimal_to_binary(decimal_num):
    binary_str = bin(decimal_num & (2**32-1))[2:]
    binary_str = binary_str.zfill(32)
    return binary_str

def binary_to_integer(binary_str):
  decimal_value = int(binary_str, 2)
  return decimal_value

def binary_addition(a, b):  
    a = a.zfill(32)
    b = b.zfill(32)
    result = ''
    carry = 0
    for i in range(32-1, -1, -1):
        temp = carry + int(a[i]) + int(b[i])
        result = str(temp % 2) + result
        carry = temp // 2
    return result.zfill(32)

def binary_to_decimal(binary_string):
    if binary_string[0] == '1':
        complemented_binary = ''.join('1' if bit == '0' else '0' for bit in binary_string)
        return -1 * (int(complemented_binary, 2) + 1)
    else:
        return int(binary_string, 2)

def binary_subtraction(a, b):
    b = ''.join('1' if bit == '0' else '0' for bit in b)
    b = binary_addition(b, '1')
    result = binary_addition(a, b)
    result = result[-32:].zfill(32)
    return result


def binary_to_hex(binary_str):
    binary_str = binary_str.zfill(32)
    binary_groups = [binary_str[i:i+4] for i in range(0, 32, 4)]
    hex_str = ''.join(hex(int(group, 2))[2:] for group in binary_groups)
    hex_str = hex_str.zfill(8)
    hex_str = "0x" + hex_str
    return hex_str

def U_type(instruction, i, dict_registers):
    opcode = instruction[25:]
    imm = instruction[:20] + '000000000000'
    rd = instruction[20:25]

    if opcode == '0110111':  
        i += 4
        result = Convert_2scomplement(imm)
        dict_registers[rd] = decimal_to_binary(result)

    elif opcode == '0010111':  
        i += 4
        result = i + Convert_2scomplement(imm)
        dict_registers[rd] = decimal_to_binary(result)
    return i,dict_registers

def J_type(instruction, i,dict_registers):
    imm = instruction[0] + instruction[10:20] + instruction[9] + instruction[1:9] + '0'
    rd = instruction[12:17]
    dict_registers[rd] = decimal_to_binary(i + 4)
    i = i + Convert_2scomplement(imm)
    i = Convert_2scomplement(decimal_to_binary(i)[:-1] + '0')
    return i,dict_registers


def I_type(line,i,dict_registers,memory):
  if(line[25:32]=="0000011"):
    rs1 = dict_registers[line[12:17]]
    rd = line[20:25]
    imm = line[0:12]
    print(rs1)
    print(rd)
    extend_signed_to_32_bits(imm)
    val = binary_addition(rs1, imm)
    address = binary_to_hex(val)
    dict_registers[rd] = memory[address]


  elif(line[25:32]=="0010011"):
    if(line[17:20]=="000"):
      rs1 = dict_registers[line[12:17]]
      rd = line[20:25]
      imm = line[0:12]
      val = binary_addition(rs1, imm)
      dict_registers[rd] = val
    else:
      rs1 = dict_registers[line[12:17]]
      rd = line[20:25]
      rs1 = binary_to_integer(rs1)
      imm = line[0:12]
      imm = binary_to_integer(imm)
      if(imm>rs1):
        val = decimal_to_binary(1)
        dict_registers[rd]= val

  elif(line[25:32]=="1100111"):
    rs1 = dict_registers[line[12:17]]
    rd = line[20:25]
    imm = line[0:12]
    
    val = i+4
    val = decimal_to_binary(val)
    dict_registers[rd] = val
    k = binary_addition(imm,rs1)
    k = k[0:-1]+'0'
    i = k


  return i,dict_registers,memory

def R_type(ins, dict_registers):
    rs2 = dict_registers[line[7:12]]
    rs1 = dict_registers[line[12:17]]
    rd = ins[20:25]


    if ins[0:7] == "0100000":
        if rs1 == '00000'.zfill(32):
            dict_registers[rd] = Convert_2scomplement(rs2)
            return dict_registers
        dict_registers[rd] = binary_subtraction(rs1, rs2)
        return dict_registers
    
    elif ins[17:20] == "000":
        dict_registers[rd] = binary_addition(rs1, rs2)
        return dict_registers
    
    elif ins[17:20] == "001":
        shift_amount = int(rs2[-5:], 2)  
        shifted_rs1 = rs1[shift_amount:] + '0' * shift_amount
        dict_registers[rd]=shifted_rs1
        return dict_registers
    
    elif ins[17:20] == "010":
        if binary_to_decimal(rs1) < binary_to_decimal(rs2):
            dict_registers[rd] = decimal_to_binary(1)
            return dict_registers

    elif ins[17:20] == "011":
        if abs(binary_to_decimal(rs1)) < abs(binary_to_decimal(rs2)):
            dict_registers[rd] = decimal_to_binary(1)
            return dict_registers
        
    elif ins[17:20] == "100":
        a = rs1
        b = rs2
        dict_registers[rd] = (''.join('1' if a[j] != b[j] else '0' for j in range(min(len(a), len(b)))))
        return dict_registers

    elif ins[17:20] == "101":
        shift_amount = int(rs2[-5:], 2)
        shifted_rs1 = '0' * shift_amount + rs1[:-shift_amount]
        dict_registers[rd]=shifted_rs1
        return dict_registers
    
    elif ins[17:20] == "110":
        dict_registers[rd] = (''.join('1' if rs1[j] == '1' or rs2[j] == '1' else '0' for j in range(min(len(rs1), len(rs2)))))
        return dict_registers
    
    elif ins[17:20] == "111":
        dict_registers[rd] = (''.join('1' if rs1[j] == rs2[j] == '1' else '0' for j in range(min(len(rs1), len(rs2)))))
        return dict_registers

    
def S_type(line,memory):
    rs2 = dict_registers[line[7:12]]
    rs1 = dict_registers[line[12:17]]
    imm = str(line[0:7]) + str(line[20:25]) 
    val = binary_addition(rs1, imm)
    address=binary_to_hex(val)
    memory[address]=rs2
    return  memory

def B_type(line,i,dict_registers):
    if(line[17:20]=="000"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      if(extend_signed_to_32_bits(rs1)==extend_signed_to_32_bits(rs2)):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

    elif(line[17:20]=="001"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      if(extend_signed_to_32_bits(rs1)!=extend_signed_to_32_bits(rs2)):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

    elif(line[17:20]=="100"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      rs2 = extend_signed_to_32_bits(rs2)
      rs1 = extend_signed_to_32_bits(rs1)
      rs2 = binary_to_decimal(rs2)
      
      rs1 = binary_to_decimal(rs1)
      if(rs1<rs2):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

    elif(line[17:20]=="101"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      rs2 = extend_signed_to_32_bits(rs2)
      rs1 = extend_signed_to_32_bits(rs1)
      rs2 = binary_to_decimal(rs2)
  
      rs1 = binary_to_decimal(rs1)
      if(rs1>=rs2):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

    elif(line[17:20]=="101"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      rs2 = extend_signed_to_32_bits(rs2)
      rs1 = extend_signed_to_32_bits(rs1)
      rs2 = binary_to_decimal(rs2)
  
      rs1 = binary_to_decimal(rs1)
      if(rs1>=rs2):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

    elif(line[17:20]=="110"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      rs2 = binary_to_integer(rs2)
      rs1 = binary_to_integer(rs1)
      
      if(rs1<rs2):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

    elif(line[17:20]=="110"):
      imm=str(line[0:7]+line[20:25])
      rs2 = dict_registers[line[7:12]]
      rs1 = dict_registers[line[12:17]]
      rs2 = binary_to_integer(rs2)
      rs1 = binary_to_integer(rs1)
  
      if(rs1>=rs2):
        k = i
        k = decimal_to_binary(k)
        imm = imm[0:-1]+"0"
        imm = extend_signed_to_32_bits(imm)
        k = binary_addition(k,imm)
        k = binary_to_integer(k)
        i = k

        return i,dict_registers



B_opcode = '1100011'
J_opcode = '1101111'
R_opcode = '0110011'
S_opcode = '0100011'
U_opcode = {'0110111':'lui', '0010111':'auipc'}
I_opcode = {'0000011':'lw', '0010011':'addi', '0010011':'sltiu', '1100111':'jalr'}

f = open("/Users/abhishekrao/Documents/vscode/python/read.txt", "r")
g = open("/Users/abhishekrao/Documents/vscode/python/write.txt","a")
inputs=[]
for line in f:
    inputs.append(line)
f.close

for i in range(len(inputs)-1):
    inputs[i]=inputs[i][0:-1]

for i in range(len(inputs)):
    flag=False
    line=inputs[i]
    if line == "00000000000000000000000001100011":
        # pc=i-1
        decimal_to_binary(i*4)
        g.write(pc)
        g.write(" ")
        for r in dict_registers:
            g.write(dict_registers[r])
            g.write(" ")
        g.write("\n")
        break
    if line[25:32]==J_opcode:
        flag=True
        J_type(line,i,dict_registers)
    elif line[25:32] in U_opcode:
        flag=True
        U_type(line,i,dict_registers)
    elif line[25:32]==S_opcode:
        flag=True
        S_type(line,memory)
    elif line[25:32] in I_opcode:
        flag=True
        I_type(line,i,dict_registers,memory)
    elif line[25:32]==R_opcode:
        flag=True
        R_type(line,dict_registers)
    elif line[25:32]==B_opcode:
        flag=True
        B_type(line,i,dict_registers)
    pc=decimal_to_binary((i+1)*4)
    g.write(pc)
    g.write(" ")
    for r in dict_registers:
       g.write(dict_registers[r])
       g.write(" ")
    g.write("\n")


for key, value in dict_registers.items():
    print(key, value)
print("\n")
for key, value in memory.items():
    print(key, value)
